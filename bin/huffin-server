#!/usr/bin/env node
'use strict';

const argv = require('yargs')
    .alias('c', 'config')
    .describe('config', 'config file')
    .demand('config')
    .argv;

const assert = require('assert');
const fs = require('fs');
const path = require('path');
const https = require('https');
const util = require('util');
const os = require('os');
const fork = require('child_process').fork;
const exec = require('child_process').exec;

const CPUS = os.cpus().length;
const WORKER = path.join(__dirname, 'huffin-worker.js');

const express = require('express');
const basicAuth = require('express-basic-auth');
const bodyParser = require('body-parser');

const Joi = require('joi');
const Celebrate = require('celebrate');

const config = JSON.parse(fs.readFileSync(argv.config).toString());

function Job(id, config) {
  this.id = id;
  this.config = config;
  this.status = 'waiting';
  this.result = null;

  this.counters = new Array(this.config.workers).fill(0);
  this.workers = new Array(this.config.workers).fill(null);
}

Job.prototype.getCPUs = function getCPUs() {
  return this.config.workers;
};

Job.prototype.toJSON = function toJSON() {
  let ticks = 0;
  for (let i = 0; i < this.counters.length; i++)
    ticks += this.counters[i];

  return {
    id: this.id,
    status: this.status,
    config: this.config,
    stats: { ticks },
    result: this.result
  };
};

Job.prototype.run = function run(callback) {
  assert(!this.process);

  this.status = 'running';

  for (let i = 0; i < this.workers.length; i++) {
    assert(!this.workers[i]);

    const worker = fork(WORKER);

    worker.send({ prefix: this.config.prefix });

    worker.on('message', (msg) => {
      if (msg.type === 'status') {
        this.counters[i] += msg.payload;
        return;
      }
      if (msg.type !== 'result')
        return;

      this.status = 'complete';
      this.result = msg.payload;

      if (this.config.email)
        this._notify(this.config.email, this.id);

      // Teardown all workers
      for (let j = 0; j < this.workers.length; j++) {
        if (i !== j)
          this.workers[j].kill('SIGTERM');
        this.workers[j] = null;
      }

      callback(null, this.result);
    });

    worker.on('exit', () => {
      if (this.status === 'complete')
        return;

      this.status = 'died';

      // Teardown rest
      this.cancel();

      callback(new Error('Job worker died'));
    });

    this.workers[i] = worker;
  }
};

Job.prototype.cancel = function cancel() {
  if (this.status === 'waiting')
    this.status = 'canceled';
  else if (this.status === 'running')
    this.status = 'killed';

  for (let i = 0; i < this.workers.length; i++) {
    if (!this.workers[i])
      continue;

    this.workers[i].kill('SIGTERM');
    this.workers[i] = null;
  }
};

Job.prototype._notify = function _notify(email, id) {
  const cmd =
      `echo "Job # ${id}" | mail -s "Huffin Generator completed job" ${email}`;
  exec(cmd, () => {});
};

function Server(options) {
  this.app = express();
  https.Server.call(this, options, this.app);

  const users = {};
  users[options.username] = options.passphrase;

  this.app.use(basicAuth({
    users
  }));
  this.app.use(bodyParser.json());

  this.jobs = new Map();
  this.queue = [];
  this.history = [];

  this._jobs = 0;
  this._cpus = CPUS;

  this.app.get('/jobs', (req, res) => {
    const jobs = [];
    this.jobs.forEach(value => jobs.push(value));
    res.json({
      jobs,
      'idle-cpus': this._cpus
    });
  });

  this.app.get('/queue', (req, res) => {
    res.json(this.queue);
  });

  this.app.get('/history', (req, res) => {
    res.json(this.history);
  });

  this.app.delete('/history', (req, res) => {
    this.history = [];
    res.json({ ok: true });
  });

  this.app.post('/job', Celebrate({
    body: Joi.object().keys({
      prefix: Joi.string().min(5).max(15).required(),
      workers: Joi.number().min(1).max(CPUS).default(CPUS),
      email: Joi.string().optional()
    })
  }), (req, res) => {
    const job = new Job(this._jobid(), req.body);
    this.queue.push(job);
    this._process();

    res.json({ id: job.id });
  });

  this.app.delete('/job/:id', Celebrate({
    params: {
      id: Joi.number().min(0).required()
    }
  }), (req, res) => {
    if (!this.jobs.has(req.params.id)) {
      res.writeHead(400);
      return res.json({ error: 'Unknown job id' });
    }

    this.jobs.get(req.params.id).cancel();
    res.json({ ok: true });
  });

  this.app.use(Celebrate.errors());
}
util.inherits(Server, https.Server);

Server.prototype._jobid = function _jobid() {
  return this._jobs++;
};

Server.prototype._process = function _process() {
  if (this._cpus === 0)
    return;

  while (this._cpus > 0 && this.queue.length !== 0) {
    let job;
    let index;
    for (let i = 0; i < this.queue.length; i++) {
      const candidate = this.queue[i];
      const jobCPUs = candidate.getCPUs();
      if (this._cpus < jobCPUs)
        continue;

      if (job && job.getCPUs() >= jobCPUs)
        continue;

      job = candidate;
      index = i;
    }

    if (!job)
      break;

    this.queue.splice(index, 1);
    this._cpus -= job.getCPUs();

    this.jobs.set(job.id, job);
    job.run((err) => this._onJobComplete(err, job));
  }
};

Server.prototype._onJobComplete = function _onJobComplete(err, job) {
  this._cpus += job.getCPUs();
  this.jobs.delete(job.id);
  this.history.push(job);

  this._process();
};

const s = new Server(Object.assign({}, config, {
  cert: fs.readFileSync(config.cert),
  key: fs.readFileSync(config.key)
})).listen(config.port, () => {
  console.log('Listening on %s:%d...', s.address().address, s.address().port);
});
